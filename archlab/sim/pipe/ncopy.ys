#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Describe how and why you modified the baseline code.
# 
# apply iaddq to replace all irmovq & addq, it can also set cc
#  
# apply 4 way loop unrolling 
# 
# avoid hazards by adding a mrmovq between the mrmovq and rmmovq
# 
# at the ending, adding several parts to deal with data left (1-3) after loop
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax	# count =0
	iaddq $-4,%rdx
        jl  Left                	
  
Loop:	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi),%r11	# read val2 from src
        rmmovq %r10, (%rsi)	# store val to dst
	andq %r10, %r10		# check if data is positive
	jle Sec1		# if not positve, got to next part
	iaddq $1, %rax		# count++

Sec1:	rmmovq %r11, 8(%rsi)	#store val2 to dest
        andq %r11, %r11         #check if data is positive
        jle Sec2		#if data is not positive go to next part
	iaddq $1, %rax          #if data is positive, add 1 to %rax

Sec2:	mrmovq 16(%rdi),%r10   #read val3 from scr
        mrmovq 24(%rdi),%r11	#read val4 from scr
        rmmovq %r10,16(%rsi)	#store val3 to dst
        andq %r10, %r10		# check if data is positve
        jle Sec3                # if not postive, go to next part
	iaddq $1, %rax		#if data is positive, add one to %rax

Sec3:	rmmovq %r11,24(%rsi)	#store val4 to dest
        andq %r11,%r11		#check if val4 is positive
        jle Check		# if not, go to next part
	iaddq $1, %rax		#if positive, add 1 to %rax

Check:  iaddq $32,%rdi		#update scr
        iaddq $32,%rsi		#update dest
        iaddq $-4,%rdx		#update len
        jge Loop		#if len is still longer or equal to 4, loop again
#When comes this part, there must be elements left & less than 4
Left:	iaddq $4,%rdx		#first data left
	iaddq $-1,%rdx		
        jl Done
	mrmovq (%rdi),%r10
        mrmovq 8(%rdi),%r11
        rmmovq %r10,(%rsi)
        andq %r10,%r10
	jle Left2
        iaddq $1,%rax

Left2:  iaddq $-1,%rdx		#second data left
        jl Done
        rmmovq %r11,8(%rsi)
	andq %r11,%r11
	jle Left3
	iaddq $1,%rax

Left3:  iaddq $-1,%rdx		#third data left
        jl Done
	mrmovq 16(%rdi),%r10
        rmmovq %r10,16(%rsi) 
        andq %r10,%r10
	jle Done
	iaddq $1,%rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
